{"version":3,"file":"main.js","mappings":"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","sources":["webpack://http-frontend/./src/js/components/Ticket.js","webpack://http-frontend/./src/js/components/ErrorPopup.js","webpack://http-frontend/./src/index.js","webpack://http-frontend/./src/js/App.js"],"sourcesContent":["export default class Ticket {\n  constructor(name, description) {\n    this.#createTicket(name, description);\n  }\n\n  #createTicket(name, description) {\n    this.name = name;\n    this.description = description;\n    this.id = null;\n    this.status = false;\n    this._currentDate = new Date();\n    this._day = this._currentDate.getDate() < 10 ? '0' + this._currentDate.getDate() : this._currentDate.getDate();\n    this._month = this._currentDate.getMonth() < 10 ? '0' + (this._currentDate.getMonth() + 1) : this._currentDate.getMonth() + 1;\n    this._year = this._currentDate.getFullYear();\n    this._hour = this._currentDate.getHours() < 10 ? '0' + this._currentDate.getHours() : this._currentDate.getHours();\n    this._minute = this._currentDate.getMinutes() < 10 ? '0' + this._currentDate.getMinutes() : this._currentDate.getMinutes();\n    this.created = `${this._day}.${this._month}.${this._year} ${this._hour}:${this._minute}`; \n    this._element = {\n      name: this.name,\n      description: this.description,\n      id: this.id,\n      status: this.status,\n      created: this.created,\n    };\n  }\n\n  get element() {\n    return this._element;\n  }\n}","export default class ErrorPopup {\n  constructor(err) {\n    this.#createElement(err);\n  }\n\n  #createElement(err) {\n    const errorContainer = document.createElement('div');\n    errorContainer.classList.add('errorContainer');\n\n    const errorSpan = document.createElement('span');\n    errorSpan.classList.add('errorSpan');\n    errorSpan.textContent = err;\n\n    errorContainer.append(errorSpan);\n    this._element = errorContainer;\n  }\n\n  get element() {\n    return this._element;\n  }\n}","import './css/style.css';\nimport App from './js/App';\n\nconst app = new App();","import Ticket from './components/Ticket';\nimport ErrorPopup from './components/ErrorPopup';\n\nexport default class App {\n  constructor() {\n    this.tickets = [];\n    this.port = 8080;\n    this.actualTicket;\n\n    this.#addBtnListener();\n    this.#submitListener();\n    this.#cancelButtonsListener();\n\n    this.#init();\n  }\n\n  #addBtnListener() {\n    const addBtn = document.querySelector('.field_addBtn');\n    addBtn.addEventListener('click', () => {\n      const addPopup = document.querySelector('.popup_add');\n      addPopup.style.display = 'flex';\n    });\n  }\n\n  #init() {\n    fetch(`http://localhost:${this.port}/?method=allTickets`)\n      .then(response => {\n        if (response.ok && response.status !== 204) {\n          return response.json();\n        } else {\n          throw new Error('Response is not Ok or status is 204');\n        }\n      })\n      .then(data => {\n        this.tickets = data;\n      })\n      .then(() => {\n        if (this.tickets.length > 0) {\n          this.#drawTickets();\n        }\n      })\n      .catch(err => {\n        console.log(err);\n      });\n    \n  }\n\n  #ticketListener(ticket) {\n    const progressBtn = ticket.querySelector('.ticket_progressBtn');\n    const editBtn = ticket.querySelector('.ticket_editBtn');\n    const deleteBtn = ticket.querySelector('.ticket_deleteBtn');\n\n    ticket.addEventListener('click', (e) => {\n      this.actualTicket = ticket;\n\n      const ticketFrame = this.tickets.find(t => t.id === this.actualTicket.id);\n\n      switch (e.target) {\n        case progressBtn:\n          const body = JSON.stringify({\n            status: !ticketFrame.status,\n          });\n    \n          fetch(`http://localhost:${this.port}/?method=updateById&id=${this.actualTicket.id}`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json;charset=utf-8'\n            },\n            body,\n          })\n            .then(response => {\n              if (response.ok && response.status !== 204) {\n                return response.json();\n              } else {\n                throw new Error('Response is not Ok or status is 204');\n              }\n            })\n            .then(data => {\n              this.tickets.forEach(t => {\n                if (t.id === data.id) {\n                  t.status = data.status;\n                }\n              })\n            })\n            .then(() => {\n              this.actualTicket = undefined;\n              if (this.tickets.length > 0) {\n                this.#drawTickets();\n              }\n            })\n            .catch(err => {\n              console.log(err);\n            });\n          break;\n        case editBtn: \n          const ticketName = ticket.querySelector('.ticket_Name').textContent;\n\n          const editPopup = document.querySelector('.popup_edit');\n          editPopup.style.display = 'flex';\n    \n          fetch(`http://localhost:${this.port}/?method=ticketById&id=${this.actualTicket.id}`)\n            .then(response => {\n              if (response.ok && response.status !== 204) {\n                return response.json();\n              } else {\n                throw new Error('Response is not Ok or status is 204');\n              }\n            })\n            .then(data => {\n              const { description } = data;\n              return description;\n            })\n            .then(description => {\n              if (description) {\n                editPopup.querySelector('.popup_input').value = ticketName;\n                editPopup.querySelector('.popup_textarea').value = description;\n              }\n            })\n            .catch(err => {\n              console.log(err);\n            });\n          break;\n\n        case deleteBtn:\n          const deletePopup = document.querySelector('.popup_delete');\n          deletePopup.style.display = 'flex';\n          break;\n        default:\n          fetch(`http://localhost:${this.port}/?method=ticketById&id=${this.actualTicket.id}`)\n            .then(response => {\n              if (response.ok && response.status !== 204) {\n                return response.json();\n              } else {\n                throw new Error('Response is not Ok or status is 204');\n              }\n            })\n            .then(data => {\n              const { description } = data;\n              return description;\n            })\n            .then(description => {\n              console.log(description);\n              const ticketDescription = this.actualTicket.querySelector('.ticket_Description');\n              if (ticketDescription.textContent === '') {\n                description.forEach(row => {\n                  const p = document.createElement('p');\n                  p.textContent = row;\n                  ticketDescription.append(p);\n                });\n              } else {\n                ticketDescription.textContent = '';\n              }\n            })\n            .catch(err => {\n              console.log(err);\n            });\n\n        break;\n      }\n\n    });\n\n    progressBtn.addEventListener('click', (e) => {\n      this.actualTicket = ticket;\n\n      const ticketFrame = this.tickets.find(t => t.id === this.actualTicket.id);\n\n      const body = JSON.stringify({\n        status: !ticketFrame.status,\n      });\n\n      fetch(`http://localhost:${this.port}/?method=updateById&id=${this.actualTicket.id}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        },\n        body,\n      })\n        .then(response => {\n          if (response.ok && response.status !== 204) {\n            return response.json();\n          } else {\n            throw new Error('Response is not Ok or status is 204');\n          }\n        })\n        .then(data => {\n          this.tickets.forEach(t => {\n            if (t.id === data.id) {\n              t.status = data.status;\n            }\n          })\n        })\n        .then(() => {\n          this.actualTicket = undefined;\n          if (this.tickets.length > 0) {\n            this.#drawTickets();\n          }\n        })\n        .catch(err => {\n          console.log(err);\n        });\n    });\n\n    editBtn.addEventListener('click', (e) => {\n      this.actualTicket = ticket;\n\n      const ticketName = ticket.querySelector('.ticket_Name').textContent;\n\n      const editPopup = document.querySelector('.popup_edit');\n      editPopup.style.display = 'flex';\n\n      fetch(`http://localhost:${this.port}/?method=ticketById&id=${this.actualTicket.id}`)\n        .then(response => {\n          if (response.ok && response.status !== 204) {\n            return response.json();\n          } else {\n            throw new Error('Response is not Ok or status is 204');\n          }\n        })\n        .then(data => {\n          const { description } = data;\n          return description;\n        })\n        .then(description => {\n          if (description) {\n            editPopup.querySelector('.popup_input').value = ticketName;\n            editPopup.querySelector('.popup_textarea').value = description;\n          }\n        })\n        .catch(err => {\n          console.log(err);\n        });\n    });\n\n    deleteBtn.addEventListener('click', (e) => {\n      this.actualTicket = ticket;\n\n      const deletePopup = document.querySelector('.popup_delete');\n      deletePopup.style.display = 'flex';\n    });\n  }\n\n  #drawTickets() {\n    document.querySelector('.field_ticketsContainer').innerHTML = '';\n    this.tickets.forEach((t) => {\n      const ticket = document.createElement('div');\n      ticket.classList.add('ticket');\n  \n      ticket.setAttribute('id', t.id);\n\n      const ticketBody = document.createElement('div');\n      ticketBody.classList.add('ticket_body');\n  \n      const progressBtn = document.createElement('div');\n      progressBtn.classList.add('ticket_progressBtn');\n      progressBtn.classList.add('ticket_icon');\n      progressBtn.classList.add('btn');\n      if (t.status) {\n        progressBtn.classList.add('ticket_progressBtn-active');\n      }\n      const nameAndDateContainer = document.createElement('div');\n      nameAndDateContainer.classList.add('ticket_nameAndDateContainer');\n  \n      const ticketName = document.createElement('span');\n      ticketName.classList.add('ticket_Name');\n      ticketName.textContent = t.name;\n  \n      const ticketDescription = document.createElement('span');\n      ticketDescription.classList.add('ticket_Description');\n  \n      const ticketCreated = document.createElement('span');\n      ticketCreated.classList.add('ticket_created');\n      ticketCreated.textContent = t.created;\n\n      nameAndDateContainer.append(ticketName, ticketCreated);\n  \n      const editBtn = document.createElement('div');\n      editBtn.classList.add('ticket_editBtn');\n      editBtn.classList.add('ticket_icon');\n      editBtn.classList.add('btn');\n  \n      const deleteBtn = document.createElement('div');\n      deleteBtn.classList.add('ticket_deleteBtn');\n      deleteBtn.classList.add('ticket_icon');\n      deleteBtn.classList.add('btn');\n\n      ticketBody.append(progressBtn, nameAndDateContainer, editBtn, deleteBtn);\n  \n      ticket.append(ticketBody, ticketDescription);\n  \n      document.querySelector('.field_ticketsContainer').append(ticket);\n      this.#ticketListener(ticket);\n    });  \n  }\n\n  #submitListener() {\n    const field = document.querySelector('.field');\n    field.addEventListener('submit', (e) => {\n      e.preventDefault();\n\n      if (e.target.closest('.popup').classList.contains('popup_add')) {\n        const formData = Array.from(e.target.closest('.form').elements).filter(({ name }) => name);\n\n        const ticket = new Ticket(formData[0].value, formData[1].value);\n  \n        const body = JSON.stringify(ticket.element);\n  \n        fetch(`http://localhost:${this.port}/?method=createTicket`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json;charset=utf-8'\n          },\n          body,\n        })\n          .then(response => {\n            if (response.ok && response.status !== 204) {\n              return response.json();\n            } else {\n              throw new Error('Response is not Ok or status is 204');\n            }\n          })\n          .then(data => {\n            if (data.error) {\n              throw new Error(data.error);\n            } else {\n              this.tickets.push(data);\n            }\n          })\n          .then(() => {\n            formData[0].value = '';\n            formData[1].value = '';\n            e.target.closest('.popup').style.display = 'none';\n            if (this.tickets.length > 0) {\n              this.#drawTickets();\n            }\n          })\n          .catch(err => {\n            if (err.message == 'Ticket already exists') {\n              const errorPopup = new ErrorPopup(err);\n\n              e.target.closest('.popup').append(errorPopup.element);\n\n              setTimeout(() => {\n                errorPopup.element.remove();\n              }, 3500);\n              \n            }\n            console.log(err);\n          });\n      } else if (e.target.closest('.popup').classList.contains('popup_edit')) {\n        const status = this.tickets.find(t => t.id === this.actualTicket.id).status;\n        const formData = Array.from(e.target.closest('.form').elements).filter(({ name }) => name);\n\n        const body = JSON.stringify({\n          name: formData[0].value,\n          description: formData[1].value,\n        });\n\n        fetch(`http://localhost:${this.port}/?method=updateById&id=${this.actualTicket.id}`, {\n          method: 'POST',\n          headers: {\n            'Content-type': 'application/json;charset=utf-8'\n          },\n          body,\n        })\n          .then(response => {\n            if (response.ok && response.status !== 204) {\n              return response.json();\n            } else {\n              throw new Error('Response is not Ok or status is 204');\n            }\n          })\n          .then(data => {\n            if (data.error) {\n              throw new Error(data.error);\n            } else {\n              this.tickets.forEach(t => {\n                if (t.id === data.id) {\n                  t.name = data.name;\n                  t.description = data.description;\n                }\n              })\n            }\n          })\n          .then(() => {\n            this.actualTicket = undefined;\n            e.target.closest('.popup').style.display = 'none';\n            if (this.tickets.length > 0) {\n              this.#drawTickets();\n            }\n          })\n          .catch(err => {\n            if (err.message == 'Ticket already exists') {\n              const errorPopup = new ErrorPopup(err);\n\n              e.target.closest('.popup').append(errorPopup.element);\n\n              setTimeout(() => {\n                errorPopup.element.remove();\n              }, 3500);\n              \n            }\n            console.log(err);\n          });\n      }\n    \n    \n      if (e.target.closest('.popup').classList.contains('popup_delete')) {\n        fetch(`http://localhost:${this.port}/?method=deleteById&id=${this.actualTicket.id}`)\n          .then(response => {\n            if (response.ok && response.status !== 204) {\n              return response.json();\n            } else {\n              throw new Error('Response is not Ok or status is 204');\n            }\n          })\n          .then(data => {\n            this.tickets = data;\n          })\n          .then(() => {\n            this.actualTicket = undefined;\n            e.target.closest('.popup').style.display = 'none';\n            this.#drawTickets();\n          })\n          .catch(err => {\n            console.log(err);\n          });\n      }\n    });\n  }\n\n  #cancelButtonsListener() {\n    const cancelButtons = document.querySelectorAll('.popup_cancelBtn');\n    [...cancelButtons].forEach((el) => {\n      el.addEventListener('click', (e) => {\n        e.preventDefault();\n        \n        e.target.parentNode.parentNode.parentNode.style.display = 'none';\n      })\n    });\n  }\n\n}"],"names":["Ticket","constructor","name","description","this","id","status","_currentDate","Date","_day","getDate","_month","getMonth","_year","getFullYear","_hour","getHours","_minute","getMinutes","created","_element","element","ErrorPopup","err","errorContainer","document","createElement","classList","add","errorSpan","textContent","append","tickets","port","actualTicket","querySelector","addEventListener","style","display","fetch","then","response","ok","json","Error","data","length","catch","console","log","ticket","progressBtn","editBtn","deleteBtn","e","ticketFrame","find","t","target","body","JSON","stringify","method","headers","forEach","undefined","ticketName","editPopup","value","ticketDescription","row","p","innerHTML","setAttribute","ticketBody","nameAndDateContainer","ticketCreated","preventDefault","closest","contains","formData","Array","from","elements","filter","error","push","message","errorPopup","setTimeout","remove","querySelectorAll","el","parentNode"],"sourceRoot":""}